//
//  MyStyleKit.m
//  ProjectName
//
//  Created by AuthorName on 27.10.16.
//  Copyright Â© 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

#import "MyStyleKit.h"


@implementation MyStyleKit

#pragma mark Cache

static UIColor* _color = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _color = [UIColor colorWithRed: 1 green: 0.642 blue: 0.099 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)color { return _color; }

#pragma mark Drawing Methods

+ (void)drawRateButtonWithFrame: (CGRect)frame
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* backgroundColor = [UIColor colorWithRed: 1 green: 0.928 blue: 0.82 alpha: 1];


    //// Subframes
    CGRect group = CGRectMake(CGRectGetMinX(frame) + 15.5, CGRectGetMinY(frame) + floor((frame.size.height - 36) * 0.46774) + 0.5, 36, 36);


    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake(CGRectGetMinX(frame) + 5.5, CGRectGetMinY(frame) + 5.5, frame.size.width - 11, frame.size.height - 12.5);
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 10];
    [backgroundColor setFill];
    [rectanglePath fill];
    [MyStyleKit.color setStroke];
    rectanglePath.lineWidth = 3;
    [rectanglePath stroke];
    {
        NSString* textContent = @"Title";
        NSMutableParagraphStyle* rectangleStyle = [[NSMutableParagraphStyle alloc] init];
        rectangleStyle.alignment = NSTextAlignmentCenter;
        NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"AvenirNext-Medium" size: 26], NSForegroundColorAttributeName: MyStyleKit.color, NSParagraphStyleAttributeName: rectangleStyle};

        CGFloat rectangleTextHeight = [textContent boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY) options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, rectangleRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (rectangleRect.size.height - rectangleTextHeight) / 2, rectangleRect.size.width, rectangleTextHeight) withAttributes: rectangleFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Group
    {
        //// Star Drawing
        UIBezierPath* starPath = [UIBezierPath bezierPath];
        [starPath moveToPoint: CGPointMake(CGRectGetMinX(group) + 0.50000 * group.size.width, CGRectGetMinY(group) + 0.13889 * group.size.height)];
        [starPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.58389 * group.size.width, CGRectGetMinY(group) + 0.38453 * group.size.height)];
        [starPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.84344 * group.size.width, CGRectGetMinY(group) + 0.38841 * group.size.height)];
        [starPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.63574 * group.size.width, CGRectGetMinY(group) + 0.54411 * group.size.height)];
        [starPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.71226 * group.size.width, CGRectGetMinY(group) + 0.79215 * group.size.height)];
        [starPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.50000 * group.size.width, CGRectGetMinY(group) + 0.64273 * group.size.height)];
        [starPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.28774 * group.size.width, CGRectGetMinY(group) + 0.79215 * group.size.height)];
        [starPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.36426 * group.size.width, CGRectGetMinY(group) + 0.54411 * group.size.height)];
        [starPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.15656 * group.size.width, CGRectGetMinY(group) + 0.38841 * group.size.height)];
        [starPath addLineToPoint: CGPointMake(CGRectGetMinX(group) + 0.41611 * group.size.width, CGRectGetMinY(group) + 0.38453 * group.size.height)];
        [starPath closePath];
        [MyStyleKit.color setFill];
        [starPath fill];
        [MyStyleKit.color setStroke];
        starPath.lineWidth = 1;
        [starPath stroke];


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(group), CGRectGetMinY(group), 36, 36)];
        [MyStyleKit.color setStroke];
        ovalPath.lineWidth = 3;
        [ovalPath stroke];
    }
}

@end
